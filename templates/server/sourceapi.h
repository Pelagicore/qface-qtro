{% set class = '{0}SourceAPI'.format(interface) %}
#ifndef {{class|upper}}_H
#define {{class|upper}}_H

// This is an autogenerated file.
// Do not edit this file, any changes made will be lost the next time it is generated.

#include <QtCore>
#include <QtRemoteObjects>

{% set properties = interface.properties|rejectattr('type.is_model')|list %}

template <class ObjectType>
class {{class}} : public SourceApiMap
{
public:
    {{class}}API()
        : SourceApiMap()
    {
        _properties[0] = {{properties|length}};
{%for property in properties %}
        _properties[{{loop.index}}] = qtro_prop_index<ObjectType>(&ObjectType::{{property}}, static_cast<{{property|returnType}} (QObject::*)()>(0),"{{property}}");
        qtro_method_test<ObjectType>(&ObjectType::{{property}}Changed, static_cast<void (QObject::*)()>(0));
{% endfor %}
{% set signals = properties|list + interface.signals|list %}
        _signals[0] = {{signals|length}};
{%for signal in signals%}
        _signals[{{loop.index}}] = qtro_signal_index<ObjectType>(&ObjectType::{{signal}}Changed, static_cast<void (QObject::*)()>(0),signalArgCount+{{loop.index0}},&signalArgTypes[{{loop.index0}}]);
{% endfor %}
        _methods[0] = {{interface.operations|length + properties|length}};
{% for property in properties %}
        _methods[{{loop.index}}] = qtro_method_index<ObjectType>(&ObjectType::push{{property|upperfirst}}, static_cast<void (QObject::*)({{property|signature}})>(0),"push{{property|upperfirst}}({{property|parameters('returnType')}})",methodArgCount+{{loop.index0}},&methodArgTypes[{{loop.index0}}]);
{% endfor %}
{% set offset = properties|length %}
{% for operation in interface.operations %}
        {% set index = loop.index0 + offset %}
        _methods[{{index+1}}] = qtro_method_index<ObjectType>(&ObjectType::{{operation}}, static_cast<void (QObject::*)({{operation|signature}})>(0),"{{operation}}({{operation|parameters('returnType')}})",methodArgCount+{{index}},&methodArgTypes[{{index}}]);
{% endfor %}
    }

    QString name() const override { return QStringLiteral("{{interface}}"); }
    QString typeName() const override { return QStringLiteral("{{interface}}"); }
    int propertyCount() const override { return _properties[0]; }
    int signalCount() const override { return _signals[0]; }
    int methodCount() const override { return _methods[0]; }
    int sourcePropertyIndex(int index) const override
    {
        if (index < 0 || index >= _properties[0])
            return -1;
        return _properties[index+1];
    }
    int sourceSignalIndex(int index) const override
    {
        if (index < 0 || index >= _signals[0])
            return -1;
        return _signals[index+1];
    }
    int sourceMethodIndex(int index) const override
    {
        if (index < 0 || index >= _methods[0])
            return -1;
        return _methods[index+1];
    }
    int signalParameterCount(int index) const override
    {
        if (index < 0 || index >= _signals[0])
            return -1;
        return signalArgCount[index];
    }
    int signalParameterType(int sigIndex, int paramIndex) const override
    {
        if (sigIndex < 0 || sigIndex >= _signals[0] || paramIndex < 0 || paramIndex >= signalArgCount[sigIndex])
            return -1;
        return signalArgTypes[sigIndex][paramIndex];
    }
    int methodParameterCount(int index) const override
    {
        if (index < 0 || index >= _methods[0])
            return -1;
        return methodArgCount[index];
    }
    int methodParameterType(int methodIndex, int paramIndex) const override
    {
        if (methodIndex < 0 || methodIndex >= _methods[0] || paramIndex < 0 || paramIndex >= methodArgCount[methodIndex])
            return -1;
        return methodArgTypes[methodIndex][paramIndex];
    }
    int propertyIndexFromSignal(int index) const override
    {
        switch (index) {
{% for property in properties %}
        case {{loop.index0}}: return _properties[{{loop.index}}];
{% endfor %}
        }
        return -1;
    }
    int propertyRawIndexFromSignal(int index) const override
    {
        switch (index) {
{% for property in properties %}
        case {{loop.index0}}: return {{loop.index}};
{% endfor %}
        }
        return -1;
    }
    const QByteArray signalSignature(int index) const override
    {
        switch (index) {
{% for signal in signals %}
        case {{loop.index0}}: return QByteArrayLiteral("{{signal|signalName}}({{signal|signature}})");
{% endfor %}
        }
        return QByteArrayLiteral("");
    }
    const QByteArray methodSignature(int index) const override
    {
        switch (index) {
{% for property in properties %}
        case {{loop.index0}}: return QByteArrayLiteral("push{{property|upperfirst}}({{property|signature}})");
{% endfor %}
{% set offset = properties|length %}
{% for operation in interface.operations %}
        case {{loop.index0 + offset}}: return QByteArrayLiteral("{{operation}}({{operation|signature}})");
{% endfor %}
        }
        return QByteArrayLiteral("");
    }
    QMetaMethod::MethodType methodType(int) const override
    {
        return QMetaMethod::Slot;
    }
    const QByteArray typeName(int index) const override
    {
        switch (index) {
{% for property in properties %}
        case {{loop.index0}}: return QByteArrayLiteral("void");
{% endfor %}
{% set offset = properties|length %}
{% for operation in interface.operations %}
        case {{loop.index0 + offset}}: return QByteArrayLiteral("{{operation|returnType}}");
{% endfor %}
        }
        return QByteArrayLiteral("");
    }
    QByteArray objectSignature() const override { return QByteArray{"{{interface|hash}}"}; }
private:
    int _properties[{{properties|length + 1}}];
    int _signals[{{properties|length + interface.signals|length + 1}}];
    int _methods[{{properties|length + interface.operations|length + 1}}];
    int signalArgCount[{{properties|length + interface.signals|length}}];
    const int* signalArgTypes[{{properties|length + interface.signals|length}}];
    int methodArgCount[{{properties|length + interface.operations|length}}];
    const int* methodArgTypes[{{properties|length + interface.operations|length}}];
};

#endif // {{class|upper}}_H